class SnakeGame {

    static SnakeGame currentGame;

    field Snake snake;

    field int infiniteLoop, foodPosition, score, leftOutOfBoundsOffset, userInput;

    field Array outOfBoundsBlocks;

    field char currentPressedKey;
    
    constructor SnakeGame new() {
        
        // Using int instead of boolean (1 = true / -1 = false)
        let infiniteLoop = 1;

        // At the beginning snake moving to the right
        let currentPressedKey = 132;

        let score = 0;

        // Number of 16x blocks offset (snake block is 16x16 to fit into one machine word for simpler calculation)
        let leftOutOfBoundsOffset = 5;

        // used for random number generator
        let userInput = 999;

        do Random.init(1783);

        let snake = Snake.new();

        do Screen.drawLine(75,0,75,256);

        do Debug.debug("SCORE:",1,false,1);
        do Debug.debug("    ",3,false,5);
        do Debug.debugInt(score,3,false,5);

        return this;
    }

    method void drawSnake() {

        // General method
        // 1. Take the last block (tail) Block instance from snakeBody Array
        // 2. Clear the screen according to the current tail address
        // 3. Take the first block (head)
        // 4. Calc new address where to go (left,right,top,bottom) depending on the currentPressedKey
        // 5. Drawing new snake part on the screen according to the new address calculated on step 4
        // 6. Assigning new address to the tail (it was erased on step 2 so we can assign new address)
        // 7. Put tail on the place of the head
        // 8. All other snake parts shift one place to the left

        var Block snakeTail, snakeHead;

        var int address;
        
        // Take snake tail
        let snakeTail = snake.getSnakePart(0);

        // Erase current snake tail
        do SnakeGame.erase(snakeTail.getBaseAddress());

        // Take snake head
        let snakeHead = snake.getSnakePart(snake.getCurrentIndex()-1);

        // Calculate next address
        let address = currentGame.calcNextAddress(snakeHead.getBaseAddress());
        if (address > 0) {
            //do Debug.debugInt(address,0,false,0);

            // Draw new address
            do SnakeGame.draw(address);

            // Assign new address to the tail
            do snakeTail.setBaseAddress(address);
        
            // Shift all items to the left and put tail to the head
            do SnakeGame.shiftLeft(snake.getSnakeBody(), snake.getCurrentIndex());
        } else {
            let infiniteLoop = -1;
        }
        
        return;
    }

    method void initializeNewSnakePart(int address) {
        var Block snakePart;
        let snakePart = Block.new(address);
        do snake.increaseSnake(snakePart);
        do SnakeGame.draw(address);
        return;
    }

    method int calcNextAddress(int currentAddress) {
        var boolean selfCollision;
        var Block newSnakePart;
        var int newAddress, newFoodCoord, i, arrSize;
        if (currentPressedKey = 130) {
            let newAddress = currentAddress - 1;
        }
        if (currentPressedKey = 131) {
            let newAddress = currentAddress - (32 * 16);
        }
        if (currentPressedKey = 132) {
            let newAddress = currentAddress + 1;
        }
        if (currentPressedKey = 133) {
            let newAddress = currentAddress + (32 * 16);
        }
        
        if (newAddress = foodPosition) {

            // If snake stepped on food increase snake and generate new food

            do currentGame.initializeNewSnakePart(newAddress);

            let foodPosition = Random.next(userInput,outOfBoundsBlocks,80);

            // Generate new food instead of the eaten one
            do currentGame.generateFoodPosition(foodPosition);

            // Increasing score on 1
            let score = score + 1;

            // Printing new score
            do Debug.debugInt(score,3,false,5);

            // since snake increased need to calculate new next address once again
            return currentGame.calcNextAddress(newAddress);

        } else {
            // out of bounds top
            if (newAddress < -1) {
                let newAddress = currentAddress + ((32 * 15) * 16);
            }
            // out of bounds bottom
            if (newAddress > 7712) {
                let newAddress = currentAddress - ((32 * 15) * 16);
            }
            // out of bounds right
            if (
                (newAddress = 32) | (newAddress = 544) | (newAddress = 1056) | (newAddress = 1568)      | 
                (newAddress = 2080) | (newAddress = 2592) | (newAddress = 3104) | (newAddress = 3616)   |
                (newAddress = 4128) | (newAddress = 4640) | (newAddress = 5152) | (newAddress = 5664)   |
                (newAddress = 6176) | (newAddress = 6688) | (newAddress = 7200) | (newAddress = 7712)
            ) {
                let newAddress = currentAddress - (31 - leftOutOfBoundsOffset);
            }
            // out of bounds left
            if (
                (newAddress = (-1 + leftOutOfBoundsOffset))   | (newAddress = (511 + leftOutOfBoundsOffset))    | 
                (newAddress = (1023 + leftOutOfBoundsOffset)) | (newAddress = (1535 + leftOutOfBoundsOffset))   |
                (newAddress = (2047 + leftOutOfBoundsOffset)) | (newAddress = (2559 + leftOutOfBoundsOffset))   | 
                (newAddress = (3071 + leftOutOfBoundsOffset)) | (newAddress = (3583 + leftOutOfBoundsOffset))   |
                (newAddress = (4095 + leftOutOfBoundsOffset)) | (newAddress = (4607 + leftOutOfBoundsOffset))   | 
                (newAddress = (5119 + leftOutOfBoundsOffset)) | (newAddress = (5631 + leftOutOfBoundsOffset))   |
                (newAddress = (6143 + leftOutOfBoundsOffset)) | (newAddress = (6655 + leftOutOfBoundsOffset))   | 
                (newAddress = (7167 + leftOutOfBoundsOffset)) | (newAddress = (7679 + leftOutOfBoundsOffset))   
            ) {
                let newAddress = currentAddress + (31 - leftOutOfBoundsOffset);
            }

            // Check for self-collision
            let arrSize = snake.getCurrentIndex()-1;
            let i = 0;
            while (i < arrSize) {
                let newSnakePart = snake.getSnakePart(i);
                if (newAddress = newSnakePart.getBaseAddress()) {
                    let selfCollision = true;
                    let i = arrSize;
                } else {
                    let i = i + 1;
                }
            }

            if (selfCollision = true) {
                // End game only if self-collision
                return -1;
            } else {
                return newAddress;
            }
        }
    }

    method void gameLoop () {
        var int newPressedKey;  
        while (infiniteLoop > 0) {
            let newPressedKey = Keyboard.keyPressed();
            if (~(newPressedKey = 0)) {
                if (newPressedKey = 130 & ~(currentPressedKey = 132)) {
                    let currentPressedKey = newPressedKey;
                }
                if (newPressedKey = 131 & ~(currentPressedKey = 133)) {
                    let currentPressedKey = newPressedKey;
                }
                if (newPressedKey = 132 & ~(currentPressedKey = 130)) {
                    let currentPressedKey = newPressedKey;
                }
                if (newPressedKey = 133 & ~(currentPressedKey = 131)) {
                    let currentPressedKey = newPressedKey;
                }  
                let userInput = userInput + newPressedKey;
            } else {
                let userInput = userInput + 1;
            }
            if (userInput > 9999) {
                let userInput = newPressedKey;
            }
            do currentGame.drawSnake();
            do Sys.wait(100); 
        }
        do Debug.debug("GAME",1,false,2);
        do Debug.debug("OVER",3,false,2);
        return;
    }

    // function from Bitmap Editor https://nand2tetris.github.io/web-ide/bitmap
    function void draw(int relativeAddress) {
        var int memAddress; 
        let memAddress = 16384+relativeAddress;
        // column 0
        do Memory.poke(memAddress, 16383);
        do Memory.poke(memAddress +32, 8193);
        do Memory.poke(memAddress +64, 8193);
        do Memory.poke(memAddress +96, 8193);
        do Memory.poke(memAddress +128, 8193);
        do Memory.poke(memAddress +160, 8193);
        do Memory.poke(memAddress +192, 8193);
        do Memory.poke(memAddress +224, 8193);
        do Memory.poke(memAddress +256, 8193);
        do Memory.poke(memAddress +288, 8193);
        do Memory.poke(memAddress +320, 8193);
        do Memory.poke(memAddress +352, 8193);
        do Memory.poke(memAddress +384, 8193);
        do Memory.poke(memAddress +416, 16383);
        return;
    }

    function void erase(int relativeAddress) {
        var int memAddress; 
        let memAddress = 16384+relativeAddress;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        return;
    }

    method void generateOutOfBoundsBlocks() {
        var int i,j,arrIndex;
        let outOfBoundsBlocks = Array.new(leftOutOfBoundsOffset*16);
        let i = 0;
        let j = 0;
        let arrIndex = 0;
        while (i < 16) {
            while (j < leftOutOfBoundsOffset) {
                let outOfBoundsBlocks[arrIndex] = j + (32 * i);
                let j = j + 1;
                let arrIndex = arrIndex+1;
            }
            let j = 0;
            let i = i + 1;
        }
        return;
    }

    function void shiftLeft(Array arr, int arraySize) {
        
        var int i, arrInt;
        var Block firstElem;

        // Save current tail
        let firstElem = arr[0];

        let i = 0;
        let arrInt = arraySize-1;

        // For some reason 'while' cannot take expressions like 'arraySize-1'
        while (i < arrInt) {
            let arr[i] = arr[i + 1]; // Move next element left
            let i = i + 1;
        }

        // Put tail to the head
        let arr[arraySize - 1] = firstElem;

        return;
    }

    function void createNewGame() {
        let currentGame = SnakeGame.new();
        do currentGame.generateOutOfBoundsBlocks();
        do currentGame.initializeNewSnakePart(5);
        do currentGame.initializeNewSnakePart(6);
        do currentGame.initializeNewSnakePart(7);
        do currentGame.generateFoodPosition(500);
        do currentGame.gameLoop();
        return;
    }
   

    method void generateFoodPosition(
        int randomVal
    ) {

        var Array arr;
        var boolean collision;
        var Block snakePart;

        var int i, row, mod, newFoodPosition, arrSize;

        // Take row (from 0 to 15)
        let row = randomVal / 32;

        // Take position in row (from 0 to 31)
        let mod = SnakeGame.mod(randomVal,32);

        // Calc new relative address based on row and position
        let newFoodPosition = ((row * 32) * 16) + mod;

        let i = 0;
        let arrSize = snake.getCurrentIndex() - 1;
        let arr = snake.getSnakeBody();

        // checking so food don't spawn on snake
        while (i < arrSize) {
            let snakePart = arr[i];
            if (snakePart.getBaseAddress() = newFoodPosition) {
                let collision = true;
                let i = arrSize;
            } else {
                let i = i + 1;
            }
        }
        
        if (collision = true) {
            //do Debug.debug("Food On Snake!",0,false,0);

            // Try again with next random value
            do currentGame.generateFoodPosition(Random.next(userInput,outOfBoundsBlocks,80));
        } else {

            let foodPosition = newFoodPosition;
            do SnakeGame.draw(foodPosition);
        }
        return;
    }

    function int mod(int x, int y) {
        var int q;
        let q = Math.divide(x, y);
        return x - (q*y);
    }

    function SnakeGame getCurrentGame() {
        return currentGame;
    }

    method void dispose() {
        do outOfBoundsBlocks.dispose();
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }

}