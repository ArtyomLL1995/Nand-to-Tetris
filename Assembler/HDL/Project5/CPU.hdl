// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	And(a=instruction[15],b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[5], out=CInstructionLoad);
    Not(in=instruction[15],out=AInstructionLoad);
    Or(a=CInstructionLoad,b=AInstructionLoad,out=ARegisterLoad);
    Mux16(a=instruction,b=ALUOut,sel=instruction[15],out=MuxOut1);
    ARegister(in=MuxOut1,load=ARegisterLoad,out=ARegisterOut,out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=DRegisterLoad);
    DRegister(in=ALUOut,load=DRegisterLoad,out=ALUInputX);
    And(a=instruction[15],b=instruction[12],out=MAndOut);
    Mux16(a=ARegisterOut,b=inM,sel=MAndOut, out=ALUInputY);
    
    ALU(x=ALUInputX,y=ALUInputY,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,out=outM,zr=ALUzr,ng=ALUng);
    
    And(a=instruction[15],b=instruction[0],out=j3);
    And(a=instruction[15],b=instruction[1],out=j2);
    And(a=instruction[15],b=instruction[2],out=j1);

    Not(in=ALUng,out=NotALUng);
    Not(in=ALUzr,out=NotALUzr);
    And(a=NotALUng,b=NotALUzr,out=MoreZero);

    And(a=j3,b=MoreZero,out=jumpJGT);

    And(a=j2,b=ALUzr,out=jumpJEQ);

    And(a=j3,b=j2,out=AndJGE);
    Or(a=NotALUng,b=ALUzr,out=MoreOrZero);
    And(a=AndJGE,b=MoreOrZero,out=jumpJGE);

    And(a=j1,b=ALUng,out=jumpJLT);

    And(a=j1,b=j3,out=AndJNE);
    And(a=AndJNE,b=NotALUzr,out=jumpJNE);

    And(a=j1,b=j2,out=AndJLE);
    Or(a=ALUng,b=ALUzr,out=LessOrZero);
    And(a=AndJLE,b=LessOrZero,out=jumpJLE);

    And(a=AndJLE, b=j3,out=jumpJMP);

    Or8Way(in[0]=jumpJGT,in[1]=jumpJEQ,in[2]=jumpJGE,in[3]=jumpJLT,in[4]=jumpJNE,in[5]=jumpJLE,in[6]=jumpJMP,in[7]=false,out=PCLoad);
    
    PC(in=ARegisterOut,load=PCLoad,inc=true,reset=reset,out[0..14]=pc);
}