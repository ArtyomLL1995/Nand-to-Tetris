class Memory {

    static Array RAM, heap;
    static int lastBlockAddrs;

    function void init() {
        let RAM = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        let lastBlockAddrs = 2048;
        return;
    }

    function int peek(int addr) {
        return RAM[addr];
    }

    function void poke(int addr, int val) {
        let RAM[addr] = val;
        return;
    }

    function int alloc(int size) {
        var int freeBlock, updatedFreeBlockSize;
        let freeBlock = Memory.getFreeBlock(size, 2048);
        let updatedFreeBlockSize = heap[freeBlock-2048 + 1] - (size + 2);
        let heap[freeBlock-2048 + 1] = updatedFreeBlockSize;
        let heap[updatedFreeBlockSize+2] = 9999;
        let heap[updatedFreeBlockSize+3] = size;
        return updatedFreeBlockSize+2048+4;
    }

    function int getFreeBlock(int size, int addrs) {
        if (~(size+2 > (heap[addrs-2048 + 1]))) {
            return addrs;
        } else {
            if (heap[addrs-2048] = 0) {
                do Sys.error(1);
            } else {
                return Memory.getFreeBlock(size, heap[addrs-2048]);
            }
        }
        return 0;
    }

    function void deAlloc(int addrs) {
        let heap[addrs-2048-2] = 0;
        let heap[lastBlockAddrs-2048] = addrs-2;
        let lastBlockAddrs = addrs-2;
        return;
    }

}