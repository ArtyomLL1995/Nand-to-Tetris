
function Math.init 0
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 0
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 0
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 0
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 0
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 0
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 0
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 0
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 0
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 0
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 0
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 0
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 0
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 0
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 0
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 0
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.multiply 3
push constant 0
pop local 1
push argument 0
pop local 2
push constant 0
pop local 0
label Math_WHILE_0
push local 0
push constant 16
lt
not
if-goto Math_WHILE_0_END
push argument 1
push local 0
call Math.bit 2
not
if-goto Math_IF_0
push local 1
push local 2
add
pop local 1
label Math_IF_0
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto Math_WHILE_0
label Math_WHILE_0_END
push local 1
return
function Math.divide 2
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
or
not
if-goto Math_IF_1
push constant 0
pop local 1
goto Math_ELSE_0
label Math_IF_1
push constant 1
neg
pop local 1
label Math_ELSE_0
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 0
push argument 1
call Math.calcDivision 2
pop local 0
push local 1
push constant 1
neg
eq
not
if-goto Math_IF_2
push local 0
neg
pop local 0
label Math_IF_2
push local 0
return
function Math.calcDivision 1
push argument 0
push argument 1
lt
push argument 1
push constant 0
lt
or
not
if-goto Math_IF_3
push constant 0
pop local 0
goto Math_ELSE_1
label Math_IF_3
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.calcDivision 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math_IF_4
push constant 2
push local 0
call Math.multiply 2
pop local 0
goto Math_ELSE_2
label Math_IF_4
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
pop local 0
label Math_ELSE_2
label Math_ELSE_1
push local 0
return
function Math.sqrt 3
push constant 0
pop local 1
push constant 7
pop local 0
label Math_WHILE_1
push local 0
push constant 1
neg
gt
not
if-goto Math_WHILE_1_END
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
push argument 0
gt
not
push local 2
push local 2
call Math.multiply 2
push constant 0
gt
and
not
if-goto Math_IF_5
push local 2
pop local 1
label Math_IF_5
push local 0
push constant 1
sub
pop local 0
goto Math_WHILE_1
label Math_WHILE_1_END
push local 1
return
function Math.min 0
push argument 0
push argument 1
gt
not
if-goto Math_IF_6
push argument 1
return
goto Math_ELSE_3
label Math_IF_6
push argument 0
return
label Math_ELSE_3
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math_IF_7
push argument 0
return
goto Math_ELSE_4
label Math_IF_7
push argument 1
return
label Math_ELSE_4
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math_IF_8
push argument 0
neg
return
goto Math_ELSE_5
label Math_IF_8
push argument 0
return
label Math_ELSE_5