class Screen {

    static Array powers_of_two, screen;

    static boolean color;

    function void init() {
        let screen = 16384;
        let color = true;
        let powers_of_two = Math.getPowersOfTwo();
        return;
    }

    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16);
        if (color) {
            // Bitmask to get mod (x % 16) because there is no % operator in Jack
            let screen[address] = screen[address] | powers_of_two[x & 15];
        } else {
            let screen[address] = screen[address] & ~(powers_of_two[x & 15]);
        }
        return;
    }

    function void drawLine(int x1, int y1, int x2, int y2) {
        var int newX, newY, diff, dx, dy, dxAbs, dyAbs;
        let dx = x2-x1;
        let dy = y2-y1;
        if ((dx = 0) | (dy = 0)) {
            if (dx = 0) {
                // draw vertical line
                do Screen.drawVerticalLine(y1,y2,x1);
            } else {
                // draw horizontal line
                do Screen.drawHorizontalLine(x1,x2,y1);
            }
        } else {
            // draw diagonal line
            let dxAbs = Math.abs(dx);
            let dyAbs = Math.abs(dy);
            let newX = 0;
            let newY = 0;
            let diff = 0;
            while (~(Math.abs(newX) > dxAbs) & ~(Math.abs(newY) > dyAbs)) {
                do Screen.drawPixel(x1+newX,y1+newY);
                if (diff < 0) {
                    if (dx > 0) {
                        let newX = newX + 1;
                    } else {
                        let newX = newX - 1;
                    }
                    let diff = diff + dyAbs;
                } else {
                    if (dy > 0) {
                        let newY = newY + 1;
                    } else {
                        let newY = newY - 1;
                    }
                    let diff = diff - dxAbs;
                }
            }
        }
        return;
    }

    // fast horizontal line draw without drawPixel
    function void drawHorizontalLineFast(int x1, int x2, int startAddress, int endAddress) {

        var int startX, endX, dxAbs;
        let dxAbs = Math.abs(x2-x1);
        let startX = Math.min(x1,x2);
        let endX = Math.max(x1,x2);

        do Screen.populateLine(startAddress,endAddress,startX,endX,dxAbs);

        return;
    }

    function void populateLine(int startAddress, int endAddress, int startX, int endX, int dxAbs) {

        var int i, num;

        // if line fits inside one machine word
        if (startAddress = endAddress) {

            let i = startX & 15;

            let num = 0;

            while (i < ((startX & 15) + dxAbs + 1)) {
                
                let num = num + powers_of_two[i];

                let i = i + 1;
            }

            if (color) {
                let screen[startAddress] = screen[startAddress] | num;
            } else {
                let screen[startAddress] = screen[startAddress] & ~num;
            }
           
        } else {

            let i = startX & 15;
            let num = 0;

            while (i < 16) {
                let num = num + powers_of_two[i];
                let i = i + 1;
            }

            // populating leftmost word
            if (color) {
                let screen[startAddress] = screen[startAddress] | num;
            } else {
                let screen[startAddress] = screen[startAddress] & ~num;
            }
            
            let i = 0;
            let num = 0;

            while (i < ((endX & 15) + 1)) {
                let num = num + powers_of_two[i];
                let i = i + 1;
            }

            // populating rightmost word
            if (color) {
                let screen[endAddress] = screen[endAddress] | num;
            } else {
                let screen[endAddress] = screen[endAddress] & ~num;
            }
            
            // populating middle words if any
            if ((endAddress - startAddress) > 1) {
                let i = 1;
                while (i < (endAddress - startAddress)) {
                    if (color) {
                        let screen[startAddress + i] = -1;
                    } else {
                        let screen[startAddress + i] = 0;
                    }
                    let i = i + 1;
                }
            }
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {

        var int startX, endX, startY, dxAbs, startAddress, endAddress;
        let dxAbs = Math.abs(x2-x1);
        let startX = Math.min(x1,x2);
        let endX = Math.max(x1,x2);
        let startY = 32 * y;
        let startAddress = startY + (startX / 16);
        let endAddress = startY + (endX / 16);

        do Screen.populateLine(startAddress,endAddress,startX,endX,dxAbs);

        return;
    }

    function void drawVerticalLine(int y1, int y2, int x) {
        var int i, startY, dyAbs;
        let dyAbs = Math.abs(y2 - y1);
        let i = 0;
        let startY = Math.min(y1,y2);
        while (i < dyAbs) {
            do Screen.drawPixel(x, startY + i);
            let i = i + 1;
        }
        return;
    }

    // uses only 1 multiply and 2 divide operations per whole function which gives nice speed boost
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dyAbs, yAbs, startY, i, startAddress, endAddress, rightmostWord, leftMostWord;
        let dyAbs = Math.abs(y2-y1);
        let yAbs = Math.min(y1,y2);
        let startY = 32 * yAbs;
        let leftMostWord = Math.min(x1,x2) / 16;
        let rightmostWord = Math.max(x1,x2) / 16;
        let i = 0;
        while (i < (dyAbs + 1)) {
            let startAddress = startY + leftMostWord;
            let endAddress = startY + rightmostWord;
            do Screen.drawHorizontalLineFast(x1,x2, startAddress, endAddress);
            let startY = startY + 32;
            let i = i + 1;
        }
        return;
    }
    
    // var 1
    // function void drawCircle(int x, int y, int r) {
    //     var int i, top, bottom, sqrt, dy, r2;
    //     let top = y - r;
    //     let bottom = y + r;
    //     let i = top;
    //     let r2 = r * r;
    //     while (i < (bottom + 1)) {
    //         let dy = y-i;
    //         let sqrt = Math.sqrt(r2 - (dy * dy));
    //         do Screen.drawHorizontalLine(x - sqrt, x + sqrt, y + dy);
    //         let i = i + 1;
    //     }
    //     return;
    // }

    // var 2 looks a little bit faster
    function void drawCircle(int x, int y, int r) {
        var int i, j; 
        var int counter; 

        let i = 0; 
        let j = r; 
        let counter = 3 - (r + r); 

        do Screen.drawHorizontalLine(x - r, x + r, y); 

        while (j > i) { 

            if (counter < 0) { 
                let counter = counter + 6 + i + i + i + i; 
                let i = i + 1; 
            } else { 
                if ((counter > 0) & (j > i)) { 
                        let j = j - 1; 
                        let counter = (counter + 4) - (j + j + j + j); 
                } 
            } 

            do Screen.drawHorizontalLine(x - i, x + i, y + j); 
            do Screen.drawHorizontalLine(x - i, x + i, y - j); 
            do Screen.drawHorizontalLine(x - j, x + j, y + i); 
            do Screen.drawHorizontalLine(x - j, x + j, y - i); 

        } 
        return; 
    }

    function void clearScreen() {
        var Array screen, i;
        let i = 16384;
        while (i < 24576) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

}